name: Kerberos Protocol CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Format check with black
      working-directory: ./backend
      run: black --check .
      
    - name: Run tests with pytest
      working-directory: ./backend
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Lint code
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1.0.1
      with:
        path: backend/
        
    - name: Run npm audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate

  build-installer:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend && pip install -r requirements.txt
        cd ../frontend && npm install
        
    - name: Build portable installer
      run: |
        cd installer
        powershell -ExecutionPolicy Bypass -File create_portable_installer_simple.ps1
        
    - name: Upload installer artifact
      uses: actions/upload-artifact@v3
      with:
        name: kerberos-installer
        path: installer/output/KerberosProtocol_Portable_v*.zip
        
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: installer/output/KerberosProtocol_Portable_v1.0.0.zip
        asset_name: KerberosProtocol_Portable_v1.0.0.zip
        asset_content_type: application/zip

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate documentation
      run: |
        # Check that all documentation files exist
        test -f README.md
        test -f CONTRIBUTING.md
        test -f CHANGELOG.md
        test -f LICENSE
        test -f docs/api.md
        test -f docs/architecture.md
        test -f docs/security.md
        
    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: success()
    
    steps:
    - name: Success notification
      run: |
        echo "üéâ All tests passed successfully!"
        echo "‚úÖ Backend tests: PASSED"
        echo "‚úÖ Frontend tests: PASSED" 
        echo "‚úÖ Security scan: PASSED"
        echo ""
        echo "üöÄ Kerberos Protocol Implementation v${{ github.ref_name }}"
        echo "üë®‚Äçüíª Author: Devesh Kumar"
        echo "üìÖ Build Date: $(date)"
        echo "üîó Repository: ${{ github.repository }}"
